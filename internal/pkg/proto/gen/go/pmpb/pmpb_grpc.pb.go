// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: pm/pmpb.proto

package pmpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ParcelsManager_AddParcel_FullMethodName      = "/pmpb.ParcelsManager/AddParcel"
	ParcelsManager_DeleteParcel_FullMethodName   = "/pmpb.ParcelsManager/DeleteParcel"
	ParcelsManager_GetParcel_FullMethodName      = "/pmpb.ParcelsManager/GetParcel"
	ParcelsManager_AddCheckpoint_FullMethodName  = "/pmpb.ParcelsManager/AddCheckpoint"
	ParcelsManager_GetCheckpoints_FullMethodName = "/pmpb.ParcelsManager/GetCheckpoints"
)

// ParcelsManagerClient is the client API for ParcelsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParcelsManagerClient interface {
	AddParcel(ctx context.Context, in *AddParcelRequest, opts ...grpc.CallOption) (*AddParcelResponse, error)
	DeleteParcel(ctx context.Context, in *DeleteParcelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetParcel(ctx context.Context, in *GetParcelRequest, opts ...grpc.CallOption) (*GetParcelResponse, error)
	AddCheckpoint(ctx context.Context, in *AddCheckpointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCheckpoints(ctx context.Context, in *GetCheckpointsRequest, opts ...grpc.CallOption) (*GetCheckpointsResponse, error)
}

type parcelsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewParcelsManagerClient(cc grpc.ClientConnInterface) ParcelsManagerClient {
	return &parcelsManagerClient{cc}
}

func (c *parcelsManagerClient) AddParcel(ctx context.Context, in *AddParcelRequest, opts ...grpc.CallOption) (*AddParcelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddParcelResponse)
	err := c.cc.Invoke(ctx, ParcelsManager_AddParcel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parcelsManagerClient) DeleteParcel(ctx context.Context, in *DeleteParcelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ParcelsManager_DeleteParcel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parcelsManagerClient) GetParcel(ctx context.Context, in *GetParcelRequest, opts ...grpc.CallOption) (*GetParcelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParcelResponse)
	err := c.cc.Invoke(ctx, ParcelsManager_GetParcel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parcelsManagerClient) AddCheckpoint(ctx context.Context, in *AddCheckpointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ParcelsManager_AddCheckpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parcelsManagerClient) GetCheckpoints(ctx context.Context, in *GetCheckpointsRequest, opts ...grpc.CallOption) (*GetCheckpointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCheckpointsResponse)
	err := c.cc.Invoke(ctx, ParcelsManager_GetCheckpoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParcelsManagerServer is the server API for ParcelsManager service.
// All implementations must embed UnimplementedParcelsManagerServer
// for forward compatibility.
type ParcelsManagerServer interface {
	AddParcel(context.Context, *AddParcelRequest) (*AddParcelResponse, error)
	DeleteParcel(context.Context, *DeleteParcelRequest) (*emptypb.Empty, error)
	GetParcel(context.Context, *GetParcelRequest) (*GetParcelResponse, error)
	AddCheckpoint(context.Context, *AddCheckpointRequest) (*emptypb.Empty, error)
	GetCheckpoints(context.Context, *GetCheckpointsRequest) (*GetCheckpointsResponse, error)
	mustEmbedUnimplementedParcelsManagerServer()
}

// UnimplementedParcelsManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedParcelsManagerServer struct{}

func (UnimplementedParcelsManagerServer) AddParcel(context.Context, *AddParcelRequest) (*AddParcelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddParcel not implemented")
}
func (UnimplementedParcelsManagerServer) DeleteParcel(context.Context, *DeleteParcelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParcel not implemented")
}
func (UnimplementedParcelsManagerServer) GetParcel(context.Context, *GetParcelRequest) (*GetParcelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParcel not implemented")
}
func (UnimplementedParcelsManagerServer) AddCheckpoint(context.Context, *AddCheckpointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCheckpoint not implemented")
}
func (UnimplementedParcelsManagerServer) GetCheckpoints(context.Context, *GetCheckpointsRequest) (*GetCheckpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpoints not implemented")
}
func (UnimplementedParcelsManagerServer) mustEmbedUnimplementedParcelsManagerServer() {}
func (UnimplementedParcelsManagerServer) testEmbeddedByValue()                        {}

// UnsafeParcelsManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParcelsManagerServer will
// result in compilation errors.
type UnsafeParcelsManagerServer interface {
	mustEmbedUnimplementedParcelsManagerServer()
}

func RegisterParcelsManagerServer(s grpc.ServiceRegistrar, srv ParcelsManagerServer) {
	// If the following call pancis, it indicates UnimplementedParcelsManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ParcelsManager_ServiceDesc, srv)
}

func _ParcelsManager_AddParcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddParcelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParcelsManagerServer).AddParcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParcelsManager_AddParcel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParcelsManagerServer).AddParcel(ctx, req.(*AddParcelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParcelsManager_DeleteParcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteParcelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParcelsManagerServer).DeleteParcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParcelsManager_DeleteParcel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParcelsManagerServer).DeleteParcel(ctx, req.(*DeleteParcelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParcelsManager_GetParcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParcelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParcelsManagerServer).GetParcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParcelsManager_GetParcel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParcelsManagerServer).GetParcel(ctx, req.(*GetParcelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParcelsManager_AddCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParcelsManagerServer).AddCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParcelsManager_AddCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParcelsManagerServer).AddCheckpoint(ctx, req.(*AddCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParcelsManager_GetCheckpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParcelsManagerServer).GetCheckpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParcelsManager_GetCheckpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParcelsManagerServer).GetCheckpoints(ctx, req.(*GetCheckpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParcelsManager_ServiceDesc is the grpc.ServiceDesc for ParcelsManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParcelsManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmpb.ParcelsManager",
	HandlerType: (*ParcelsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddParcel",
			Handler:    _ParcelsManager_AddParcel_Handler,
		},
		{
			MethodName: "DeleteParcel",
			Handler:    _ParcelsManager_DeleteParcel_Handler,
		},
		{
			MethodName: "GetParcel",
			Handler:    _ParcelsManager_GetParcel_Handler,
		},
		{
			MethodName: "AddCheckpoint",
			Handler:    _ParcelsManager_AddCheckpoint_Handler,
		},
		{
			MethodName: "GetCheckpoints",
			Handler:    _ParcelsManager_GetCheckpoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pm/pmpb.proto",
}
