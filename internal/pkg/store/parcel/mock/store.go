// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/subliker/track-parcel-service/internal/pkg/model"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockStore) Add(arg0 model.Parcel) (model.TrackNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(model.TrackNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockStoreMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStore)(nil).Add), arg0)
}

// AddCheckpoint mocks base method.
func (m *MockStore) AddCheckpoint(arg0 model.TrackNumber, arg1 model.Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCheckpoint", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCheckpoint indicates an expected call of AddCheckpoint.
func (mr *MockStoreMockRecorder) AddCheckpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCheckpoint", reflect.TypeOf((*MockStore)(nil).AddCheckpoint), arg0, arg1)
}

// AddSubscription mocks base method.
func (m *MockStore) AddSubscription(arg0 model.TrackNumber, arg1 model.TelegramID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubscription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockStoreMockRecorder) AddSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockStore)(nil).AddSubscription), arg0, arg1)
}

// CheckAccess mocks base method.
func (m *MockStore) CheckAccess(arg0 model.TrackNumber, arg1 model.TelegramID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccess", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAccess indicates an expected call of CheckAccess.
func (mr *MockStoreMockRecorder) CheckAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccess", reflect.TypeOf((*MockStore)(nil).CheckAccess), arg0, arg1)
}

// Close mocks base method.
func (m *MockStore) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// Delete mocks base method.
func (m *MockStore) Delete(arg0 model.TrackNumber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), arg0)
}

// DeleteSubscription mocks base method.
func (m *MockStore) DeleteSubscription(arg0 model.TrackNumber, arg1 model.TelegramID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockStoreMockRecorder) DeleteSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockStore)(nil).DeleteSubscription), arg0, arg1)
}

// Exists mocks base method.
func (m *MockStore) Exists(arg0 model.TrackNumber) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockStoreMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockStore)(nil).Exists), arg0)
}

// GetCheckpoints mocks base method.
func (m *MockStore) GetCheckpoints(trackNum model.TrackNumber, page, pageSize uint64) ([]*model.Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckpoints", trackNum, page, pageSize)
	ret0, _ := ret[0].([]*model.Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckpoints indicates an expected call of GetCheckpoints.
func (mr *MockStoreMockRecorder) GetCheckpoints(trackNum, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckpoints", reflect.TypeOf((*MockStore)(nil).GetCheckpoints), trackNum, page, pageSize)
}

// GetInfo mocks base method.
func (m *MockStore) GetInfo(arg0 model.TrackNumber) (model.Parcel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", arg0)
	ret0, _ := ret[0].(model.Parcel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockStoreMockRecorder) GetInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockStore)(nil).GetInfo), arg0)
}

// GetSubscribed mocks base method.
func (m *MockStore) GetSubscribed(arg0 model.TrackNumber, arg1 model.TelegramID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribed", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribed indicates an expected call of GetSubscribed.
func (mr *MockStoreMockRecorder) GetSubscribed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribed", reflect.TypeOf((*MockStore)(nil).GetSubscribed), arg0, arg1)
}

// ParcelSubscribers mocks base method.
func (m *MockStore) ParcelSubscribers(arg0 model.TrackNumber) ([]model.TelegramID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParcelSubscribers", arg0)
	ret0, _ := ret[0].([]model.TelegramID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParcelSubscribers indicates an expected call of ParcelSubscribers.
func (mr *MockStoreMockRecorder) ParcelSubscribers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParcelSubscribers", reflect.TypeOf((*MockStore)(nil).ParcelSubscribers), arg0)
}
