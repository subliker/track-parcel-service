/** Code generated using https://github.com/MrNemo64/go-n-i18n 
 * Any changes to this file will be lost on the next tool run */

package lang

import (
    "fmt"
    "strings"
)

func MessagesFor(tag string) (Messages, bool) {
    switch strings.ReplaceAll(tag, "_", "-") {
    case "ru-RU":
        return ru_RU_Messages{}, true
    }
    return nil, false
}

func MessagesForMust(tag string) Messages {
    switch strings.ReplaceAll(tag, "_", "-") {
    case "ru-RU":
        return ru_RU_Messages{}
    }
    panic(fmt.Errorf("unknwon language tag: " + tag))
}

func MessagesForOrDefault(tag string) Messages {
    switch strings.ReplaceAll(tag, "_", "-") {
    case "ru-RU":
        return ru_RU_Messages{}
    }
    return ru_RU_Messages{}
}

type Messages interface{
    Common() common
    StartMessage() startMessage
    Register() register
    CheckParcel() checkParcel
    Menu() menu
    Notification() notification
}
type common interface{
    Markup() commonmarkup
    Errors() commonerrors
}
type commonmarkup interface{
    BtnDontSpecify() string
}
type commonerrors interface{
    Internal() string
    IncorrectInput() string
    Length(min int, max int) string
    TimeFormat() string
    Email() string
    PhoneNumber() string
    AlreadyRegistered() string
    NotAuthorized() string
}
type startMessage interface{
    Head(user_name string) string
    Main() string
    Markup() startMessagemarkup
}
type startMessagemarkup interface{
    Register() string
}
type register interface{
    Points() registerpoints
}
type registerpoints interface{
    FullName() string
    Email() string
    PhoneNumber() string
    Ready(name string, email string, phoneNumber string) string
}
type checkParcel interface{
    Errors() checkParcelerrors
    Points() checkParcelpoints
    Main(name string, recipient string, arrivalAddress string, forecastDate string, description string, status string) string
    Subscription(subscribed bool) string
    Markup() checkParcelmarkup
    SubscribeEvent() checkParcelsubscribeEvent
}
type checkParcelerrors interface{
    NotFound() string
    AlreadyDescribed() string
    AlreadySubscribed() string
}
type checkParcelpoints interface{
    TrackNumber() string
}
type checkParcelmarkup interface{
    Subscribe() string
    Describe() string
}
type checkParcelsubscribeEvent interface{
    Subscribed(trackNumber string) string
    Described(trackNumber string) string
}
type menu interface{
    Main() string
    Markup() menumarkup
}
type menumarkup interface{
    CheckParcel() string
}
type notification interface{
    Main(trackNumber string, time string, place string, description string, status string) string
}

type ru_RU_Messages struct{}
func (ru_RU_Messages) Common() common {
    return ru_RU_common{}
}
type ru_RU_common struct{}
func (ru_RU_common) Markup() commonmarkup {
    return ru_RU_commonmarkup{}
}
type ru_RU_commonmarkup struct{}
func (ru_RU_commonmarkup) BtnDontSpecify() string {
    return "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"
}
func (ru_RU_common) Errors() commonerrors {
    return ru_RU_commonerrors{}
}
type ru_RU_commonerrors struct{}
func (ru_RU_commonerrors) Internal() string {
    return "üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
}
func (ru_RU_commonerrors) IncorrectInput() string {
    return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!"
}
func (ru_RU_commonerrors) Length(min int, max int) string {
    return fmt.Sprintf("üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç %d –¥–æ %d —Å–∏–º–≤–æ–ª–æ–≤. ‚úçÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", min, max)
}
func (ru_RU_commonerrors) TimeFormat() string {
    return "‚è∞ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú. –ù–∞–ø—Ä–∏–º–µ—Ä: 24.12.2024 12:30. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
}
func (ru_RU_commonerrors) Email() string {
    return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: example@mail.com."
}
func (ru_RU_commonerrors) PhoneNumber() string {
    return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: +7 123 456-78-90."
}
func (ru_RU_commonerrors) AlreadyRegistered() string {
    return "‚ö†Ô∏è –û—à–∏–±–∫–∞! –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"
}
func (ru_RU_commonerrors) NotAuthorized() string {
    return "üö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. üîë‚ú®"
}
func (ru_RU_Messages) StartMessage() startMessage {
    return ru_RU_startMessage{}
}
type ru_RU_startMessage struct{}
func (ru_RU_startMessage) Head(user_name string) string {
    if user_name == "" {
        return "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ‚ú®"
    } else {
        return fmt.Sprintf("‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s! ‚ú®", user_name)
    }
}
func (ru_RU_startMessage) Main() string {
    return "_–ú—ã –¥–µ–ª–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–æ–∫ –ø—Ä–æ—Å—Ç—ã–º –∏ —É–¥–æ–±–Ω—ã–º!_" + "\n" +
        "" + "\n" +
        "_–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:_" + "\n" +
        " ‚Ä¢ üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å—ã–ª–∫–∏ –∑–∞ —Å–µ–∫—É–Ω–¥—ã" + "\n" +
        " ‚Ä¢ üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞" + "\n" +
        "" + "\n" +
        "_–ù–∞—á–Ω–∏—Ç–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞!_" + "\n" +
        "*–ö–Ω–æ–ø–∫–∞*: \"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\""
}
func (ru_RU_startMessage) Markup() startMessagemarkup {
    return ru_RU_startMessagemarkup{}
}
type ru_RU_startMessagemarkup struct{}
func (ru_RU_startMessagemarkup) Register() string {
    return "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
}
func (ru_RU_Messages) Register() register {
    return ru_RU_register{}
}
type ru_RU_register struct{}
func (ru_RU_register) Points() registerpoints {
    return ru_RU_registerpoints{}
}
type ru_RU_registerpoints struct{}
func (ru_RU_registerpoints) FullName() string {
    return "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏! üìù" + "\n" +
        "_–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ –∏–º–µ–Ω–∏. –≠—Ç–æ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—É–±–ª–∏—á–Ω–æ, —Ç–∞–∫ —á—Ç–æ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–µ –ø—Ä–æ—Ç–∏–≤!_" + "\n" +
        "" + "\n" +
        "_–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á_"
}
func (ru_RU_registerpoints) Email() string {
    return "–¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –≤–∞—à email! üìß" + "\n" +
        "_–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤–∞—à–∏—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å –≤–∞–º–∏ —Å–≤—è–∑—å –ø–æ –ø–æ—á—Ç–µ._" + "\n" +
        "" + "\n" +
        "_–ü—Ä–∏–º–µ—Ä: ivanov@example.com_"
}
func (ru_RU_registerpoints) PhoneNumber() string {
    return "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞! üì±" + "\n" +
        "_–≠—Ç–æ—Ç —à–∞–≥ –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω, –Ω–æ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚Äî —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä._" + "\n" +
        "" + "\n" +
        "_–ü—Ä–∏–º–µ—Ä: +7 (999) 123-45-67_"
}
func (ru_RU_registerpoints) Ready(name string, email string, phoneNumber string) string {
    return "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! üéâ" + "\n" +
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ! üôå" + "\n" +
        "–í–æ—Ç —á—Ç–æ —Ç–µ–ø–µ—Ä—å –≤–∏–¥—è—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—ã:" + "\n" +
        fmt.Sprintf("*–ò–º—è:* %s", name) + "\n" +
        fmt.Sprintf("*Email:* %s", email) + "\n" +
        fmt.Sprintf("*–¢–µ–ª–µ—Ñ–æ–Ω:* %s", phoneNumber) + "\n" +
        "" + "\n" +
        "_–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è. üëá_"
}
func (ru_RU_Messages) CheckParcel() checkParcel {
    return ru_RU_checkParcel{}
}
type ru_RU_checkParcel struct{}
func (ru_RU_checkParcel) Errors() checkParcelerrors {
    return ru_RU_checkParcelerrors{}
}
type ru_RU_checkParcelerrors struct{}
func (ru_RU_checkParcelerrors) NotFound() string {
    return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Å—ã–ª–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º. üì¶‚ùå"
}
func (ru_RU_checkParcelerrors) AlreadyDescribed() string {
    return "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –≤–µ–¥—å –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø–æ—Å—ã–ª–∫—É"
}
func (ru_RU_checkParcelerrors) AlreadySubscribed() string {
    return "‚ùå –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø–æ—Å—ã–ª–∫—É"
}
func (ru_RU_checkParcel) Points() checkParcelpoints {
    return ru_RU_checkParcelpoints{}
}
type ru_RU_checkParcelpoints struct{}
func (ru_RU_checkParcelpoints) TrackNumber() string {
    return "üì® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –ø–æ—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä, VF834349180"
}
func (ru_RU_checkParcel) Main(name string, recipient string, arrivalAddress string, forecastDate string, description string, status string) string {
    return "–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–π –ø–æ—Å—ã–ª–∫–µ:" + "\n" +
        fmt.Sprintf("üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: %s", name) + "\n" +
        fmt.Sprintf("üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: %s", recipient) + "\n" +
        fmt.Sprintf("üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: %s", arrivalAddress) + "\n" +
        fmt.Sprintf("üìÖ –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: %s", forecastDate) + "\n" +
        fmt.Sprintf("üìã –û–ø–∏—Å–∞–Ω–∏–µ: %s", description) + "\n" +
        fmt.Sprintf("‚è≥ –°—Ç–∞—Ç—É—Å: %s", status) + "\n" +
        ""
}
func (ru_RU_checkParcel) Subscription(subscribed bool) string {
    if subscribed==true {
        return "–í—ã *–ø–æ–¥–ø–∏—Å–∞–Ω—ã* –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! üì¶" + "\n" +
            "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –µ–µ —Å—Ç–∞—Ç—É—Å–∞." + "\n" +
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. üëá"
    } else if subscribed==false {
        return "–í—ã *–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã* –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–µ–π –ø–æ—Å—ã–ª–∫–µ. üì¶" + "\n" +
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. üëá"
    } else {
        return fmt.Sprintf("%t", subscribed)
    }
}
func (ru_RU_checkParcel) Markup() checkParcelmarkup {
    return ru_RU_checkParcelmarkup{}
}
type ru_RU_checkParcelmarkup struct{}
func (ru_RU_checkParcelmarkup) Subscribe() string {
    return "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
}
func (ru_RU_checkParcelmarkup) Describe() string {
    return "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è"
}
func (ru_RU_checkParcel) SubscribeEvent() checkParcelsubscribeEvent {
    return ru_RU_checkParcelsubscribeEvent{}
}
type ru_RU_checkParcelsubscribeEvent struct{}
func (ru_RU_checkParcelsubscribeEvent) Subscribed(trackNumber string) string {
    return fmt.Sprintf("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø–æ—Å—ã–ª–∫—É —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º %s ‚úÖ", trackNumber)
}
func (ru_RU_checkParcelsubscribeEvent) Described(trackNumber string) string {
    return fmt.Sprintf("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –ø–æ—Å—ã–ª–∫–∏ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º %s ‚ùå", trackNumber)
}
func (ru_RU_Messages) Menu() menu {
    return ru_RU_menu{}
}
type ru_RU_menu struct{}
func (ru_RU_menu) Main() string {
    return "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å! üôå" + "\n" +
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å—ã–ª–∫–∏. –í—Å—ë, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ ‚Äî –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ. üì¶" + "\n" +
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ *–æ–ø—Ü–∏–π*!"
}
func (ru_RU_menu) Markup() menumarkup {
    return ru_RU_menumarkup{}
}
type ru_RU_menumarkup struct{}
func (ru_RU_menumarkup) CheckParcel() string {
    return "üì¶ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å—ã–ª–∫—É"
}
func (ru_RU_Messages) Notification() notification {
    return ru_RU_notification{}
}
type ru_RU_notification struct{}
func (ru_RU_notification) Main(trackNumber string, time string, place string, description string, status string) string {
    return fmt.Sprintf("üì¶ –°—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏ %s –æ–±–Ω–æ–≤–ª—ë–Ω!", trackNumber) + "\n" +
        "" + "\n" +
        fmt.Sprintf("üïí *–í—Ä–µ–º—è:* %s", time) + "\n" +
        fmt.Sprintf("üìç *–ú–µ—Å—Ç–æ:* %s", place) + "\n" +
        fmt.Sprintf("üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* %s", description) + "\n" +
        fmt.Sprintf("üìä *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:* %s", status)
}


