// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/subliker/track-parcel-service/internal/pkg/model"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockUserRepository) Exists(arg0 model.TelegramID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockUserRepositoryMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockUserRepository)(nil).Exists), arg0)
}

// Get mocks base method.
func (m *MockUserRepository) Get(arg0 model.TelegramID) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepository)(nil).Get), arg0)
}

// Register mocks base method.
func (m *MockUserRepository) Register(arg0 model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserRepositoryMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserRepository)(nil).Register), arg0)
}

// MockManagerRepository is a mock of ManagerRepository interface.
type MockManagerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockManagerRepositoryMockRecorder
}

// MockManagerRepositoryMockRecorder is the mock recorder for MockManagerRepository.
type MockManagerRepositoryMockRecorder struct {
	mock *MockManagerRepository
}

// NewMockManagerRepository creates a new mock instance.
func NewMockManagerRepository(ctrl *gomock.Controller) *MockManagerRepository {
	mock := &MockManagerRepository{ctrl: ctrl}
	mock.recorder = &MockManagerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerRepository) EXPECT() *MockManagerRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockManagerRepository) Exists(arg0 model.TelegramID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockManagerRepositoryMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockManagerRepository)(nil).Exists), arg0)
}

// Get mocks base method.
func (m *MockManagerRepository) Get(arg0 model.TelegramID) (model.Manager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(model.Manager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockManagerRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockManagerRepository)(nil).Get), arg0)
}

// GetApiToken mocks base method.
func (m *MockManagerRepository) GetApiToken(arg0 model.TelegramID) (model.ManagerApiToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiToken", arg0)
	ret0, _ := ret[0].(model.ManagerApiToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiToken indicates an expected call of GetApiToken.
func (mr *MockManagerRepositoryMockRecorder) GetApiToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiToken", reflect.TypeOf((*MockManagerRepository)(nil).GetApiToken), arg0)
}

// GetTelegramId mocks base method.
func (m *MockManagerRepository) GetTelegramId(apiToken model.ManagerApiToken) (model.TelegramID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTelegramId", apiToken)
	ret0, _ := ret[0].(model.TelegramID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTelegramId indicates an expected call of GetTelegramId.
func (mr *MockManagerRepositoryMockRecorder) GetTelegramId(apiToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTelegramId", reflect.TypeOf((*MockManagerRepository)(nil).GetTelegramId), apiToken)
}

// Register mocks base method.
func (m *MockManagerRepository) Register(arg0 model.Manager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockManagerRepositoryMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockManagerRepository)(nil).Register), arg0)
}
