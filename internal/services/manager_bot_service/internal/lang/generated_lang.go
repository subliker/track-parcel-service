/** Code generated using https://github.com/MrNemo64/go-n-i18n 
 * Any changes to this file will be lost on the next tool run */

package lang

import (
    "fmt"
    "strings"
)

func MessagesFor(tag string) (Messages, bool) {
    switch strings.ReplaceAll(tag, "_", "-") {
    case "ru-RU":
        return ru_RU_Messages{}, true
    }
    return nil, false
}

func MessagesForMust(tag string) Messages {
    switch strings.ReplaceAll(tag, "_", "-") {
    case "ru-RU":
        return ru_RU_Messages{}
    }
    panic(fmt.Errorf("unknwon language tag: " + tag))
}

func MessagesForOrDefault(tag string) Messages {
    switch strings.ReplaceAll(tag, "_", "-") {
    case "ru-RU":
        return ru_RU_Messages{}
    }
    return ru_RU_Messages{}
}

type Messages interface{
    StartMessage() startMessage
    Register() register
    States() states
}
type startMessage interface{
    Head(user_name string) string
    Main() string
    Markup() startMessagemarkup
}
type startMessagemarkup interface{
    Register() string
}
type register interface{
    Points() registerpoints
}
type registerpoints interface{
    FullName() string
    Email() string
    PhoneNumber() string
    Company() string
    Ready(name string, email string, phoneNumber string, company string) string
}
type states interface{
    MakeParcel() statesmakeParcel
    Register() statesregister
}
type statesmakeParcel interface{
    Name() string
    Recipient() string
    ArrivalAddress() string
    ForecastDate() string
    ForecastDateIncorrectTime() string
    Description() string
    Ready(trackNumber string) string
}
type statesregister interface{
    FullName() string
    Email() string
    PhoneNumber() string
    Company() string
    Ready() string
}

type ru_RU_Messages struct{}
func (ru_RU_Messages) StartMessage() startMessage {
    return ru_RU_startMessage{}
}
type ru_RU_startMessage struct{}
func (ru_RU_startMessage) Head(user_name string) string {
    if user_name == "" {
        return "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ‚ú®"
    } else {
        return fmt.Sprintf("‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s! ‚ú®", user_name)
    }
}
func (ru_RU_startMessage) Main() string {
    return "_–ú—ã —É–ø—Ä–æ—â–∞–µ–º —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –ø–æ—Å—ã–ª–∫–∞–º–∏! –° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:_" + "\n" +
        "" + "\n" +
        " ‚Ä¢ üì¶ –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å—ã–ª–∫–∏" + "\n" +
        " ‚Ä¢ üó∫Ô∏è –î–æ–±–∞–≤–ª—è—Ç—å —á–µ–∫–ø–æ–∏–Ω—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏" + "\n" +
        " ‚Ä¢ üîç –ë—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é" + "\n" +
        "" + "\n" +
        "_–ù–∞—á–Ω–∏—Ç–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞!_" + "\n" +
        "*–ö–Ω–æ–ø–∫–∞*: \"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\""
}
func (ru_RU_startMessage) Markup() startMessagemarkup {
    return ru_RU_startMessagemarkup{}
}
type ru_RU_startMessagemarkup struct{}
func (ru_RU_startMessagemarkup) Register() string {
    return "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
}
func (ru_RU_Messages) Register() register {
    return ru_RU_register{}
}
type ru_RU_register struct{}
func (ru_RU_register) Points() registerpoints {
    return ru_RU_registerpoints{}
}
type ru_RU_registerpoints struct{}
func (ru_RU_registerpoints) FullName() string {
    return "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏! üìù" + "\n" +
        "_–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ –∏–º–µ–Ω–∏. –≠—Ç–æ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—É–±–ª–∏—á–Ω–æ, —Ç–∞–∫ —á—Ç–æ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–µ –ø—Ä–æ—Ç–∏–≤!_" + "\n" +
        "" + "\n" +
        "_–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á_"
}
func (ru_RU_registerpoints) Email() string {
    return "–¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –≤–∞—à email! üìß" + "\n" +
        "_–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞—à–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å –≤–∞–º–∏ —Å–≤—è–∑—å –ø–æ –ø–æ—á—Ç–µ._" + "\n" +
        "" + "\n" +
        "_–ü—Ä–∏–º–µ—Ä: ivanov@example.com_"
}
func (ru_RU_registerpoints) PhoneNumber() string {
    return "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞! üì±" + "\n" +
        "_–≠—Ç–æ—Ç —à–∞–≥ –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω, –Ω–æ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚Äî —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä._" + "\n" +
        "" + "\n" +
        "_–ü—Ä–∏–º–µ—Ä: +7 (999) 123-45-67_"
}
func (ru_RU_registerpoints) Company() string {
    return "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏! üè¢" + "\n" +
        "_–≠—Ç–æ –ø–æ–ª–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏—è, —Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –µ–µ —Å—é–¥–∞. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –ø—É–±–ª–∏—á–Ω–æ._" + "\n" +
        "" + "\n" +
        "_–ü—Ä–∏–º–µ—Ä: –û–û–û '–¢–µ—Ö–Ω–æ–ü–∞—Ä—Ç'_"
}
func (ru_RU_registerpoints) Ready(name string, email string, phoneNumber string, company string) string {
    return "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! üéâ" + "\n" +
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ! üôå" + "\n" +
        "–í–æ—Ç —á—Ç–æ —Ç–µ–ø–µ—Ä—å –≤–∏–¥—è—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–∏:" + "\n" +
        fmt.Sprintf("*–ò–º—è:* %s", name) + "\n" +
        fmt.Sprintf("*Email:* %s", email) + "\n" +
        fmt.Sprintf("*–¢–µ–ª–µ—Ñ–æ–Ω* %s", phoneNumber) + "\n" +
        fmt.Sprintf("*–ö–æ–º–ø–∞–Ω–∏—è:* %s", company) + "\n" +
        "" + "\n" +
        "_–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è. üëá_"
}
func (ru_RU_Messages) States() states {
    return ru_RU_states{}
}
type ru_RU_states struct{}
func (ru_RU_states) MakeParcel() statesmakeParcel {
    return ru_RU_statesmakeParcel{}
}
type ru_RU_statesmakeParcel struct{}
func (ru_RU_statesmakeParcel) Name() string {
    return "–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –≤–∞—à—É –ø–æ—Å—ã–ª–∫—É! –ö–∞–∫ –≤—ã –Ω–∞–∑–æ–≤–µ—Ç–µ —ç—Ç—É –ø–æ—Å—ã–ª–∫—É?"
}
func (ru_RU_statesmakeParcel) Recipient() string {
    return "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è"
}
func (ru_RU_statesmakeParcel) ArrivalAddress() string {
    return "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è"
}
func (ru_RU_statesmakeParcel) ForecastDate() string {
    return "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏"
}
func (ru_RU_statesmakeParcel) ForecastDateIncorrectTime() string {
    return "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
}
func (ru_RU_statesmakeParcel) Description() string {
    return "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ—Å—ã–ª–∫–∏"
}
func (ru_RU_statesmakeParcel) Ready(trackNumber string) string {
    return fmt.Sprintf("–ü–æ—Å—ã–ª–∫–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É. –ï–µ —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä: %s", trackNumber)
}
func (ru_RU_states) Register() statesregister {
    return ru_RU_statesregister{}
}
type ru_RU_statesregister struct{}
func (ru_RU_statesregister) FullName() string {
    return "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞! –í–≤–µ–¥–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –§–ò–û –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
}
func (ru_RU_statesregister) Email() string {
    return "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—É—é –ø–æ—á—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
}
func (ru_RU_statesregister) PhoneNumber() string {
    return "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—É—é –ø–æ—á—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –≠—Ç–æ –ø–æ–ª–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É"
}
func (ru_RU_statesregister) Company() string {
    return "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—É—é –∫–æ–º–ø–∞–Ω–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –≠—Ç–æ –ø–æ–ª–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É"
}
func (ru_RU_statesregister) Ready() string {
    return "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
}


